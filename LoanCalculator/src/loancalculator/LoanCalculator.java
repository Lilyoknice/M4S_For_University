package loancalculator;
// Создаем приложение под именем loancalculator
// Оператор package

// Первое, что может появиться в исходном файле Java - это оператор package, 
// который сообщает транслятору, в каком пакете должны определяться содержащиеся
// в данном файле классы. Пакеты задают набор раздельных пространств имен, в 
// которых хранятся имена классов. Если оператор package не указан, классы 
// попадают в безымянное пространство имен, используемое по умолчанию. Если вы 
// объявляете класс, как принадлежащий определенному пакет
import java.awt.event.*;
// Импортируем библиотеку событий
// Оператор import

// После оператора package, но до любого определения классов в исходном 
// Java-файле, может присутствовать список операторов import. Пакеты являются 
// хорошим механизмом для отделения классов друг от друга, поэтому все 
// встроенные в Java классы хранятся в пакетах.
import javax.swing.*;
// Импортируем библиотеку визуализации
public class LoanCalculator implements  ActionListener{
    // Обьявляем класс LoanCalculator
    // Оператор implements

    // Оператор implements - это дополнение к определению класса, реализующего 
    // некоторый интерфейс(ы). 

    //    class имя_класса [extends суперкласс]
    //    [implements интерфейс0 [, интерфейс1...]]
    //    {
    //    тело класса
    //    } 

    // Если в классе реализуется несколько интерфейсов, то их имена разделяются запятыми.
        JTextField txtLabel1 = new JTextField("Стоемость товара, руб.", 20);
        // Текстовые поля класса TextField
        // Текстовое поле класса TextField может быть использовано для ввода 
        //одной строки текста, такой как имя пользователя, адрес URL 
        //или чего-нибудь еще. 

        // Конструкторы класса TextField допускают указание начальной ширины 
        //поля в символах, а также предварительную инициализацию заданной 
        //текстовой строкой.
        JTextField txt1 = new JTextField(8);
        // Первое поле ввода
        // Текстовое поле JTextField

        // Текстовое поле — простой и часто используемый компонент, 
        //предназначенный для ввода небольших по объему (записываемых в одну 
        //строку) текстовых данных. Для создания текстового поля чаще всего 
        //используются конструкторы:

        // JTextField(int columns) — создает пустое текстовое поле, ширина 
        //которого достаточна для размещения columns символов. При этом 
        //пользователь может вводить в текстовое поле строку какой угодно 
        //длины: она просто будет прокручиваться.
        JTextField txtLabel2 = new JTextField("Первоначальный взнос, руб.", 20);
        // Поле Первоначальный взнос
        JTextField txt2 = new JTextField(8);
        // Второе поле ввода
        JTextField txtLabel3 = new JTextField("Процентная ставка, %", 20);
        JTextField txt3 = new JTextField(8);
        JTextField txtLabel4 = new JTextField("Срок кредита, мес.", 20);
        JTextField txt4 = new JTextField(8);
        JTextField txtLabel5 = new JTextField("Сумма в кредит", 20);
        JTextField txtRezult5 = new JTextField(8);
        JTextField txtLabel6 = new JTextField("Процент перначального взноса", 20);
        JTextField txtRezult6 = new JTextField(8);
        JTextField txtLabel7 = new JTextField("Ежемесячный платеж", 20);
        JTextField txtRezult7 = new JTextField(8);
        JTextField txtLabel9 = new JTextField("Переплата", 20);
        JTextField txtRezult9 = new JTextField(8);
        JTextField txtLabel10 = new JTextField("Сумма кредита", 20);
        JTextField txtRezult10 = new JTextField(8);
        JButton btnRezult = new JButton("Вычислить"); 
        // Это кнопка на вычисление 
        // Кнопка JButton

        // Мы постоянно использовали кнопки в предыдущей главе, хотя и не 
        //касались возможностей их настройки. Кнопка — это прямоугольник с 
        //текстом (и/или значком), по которому пользователь щелкает, когда 
        //хочет выполнить какое-то действие (или о чем-то сигнализировать).

        // Кнопка создается одним из пяти конструкторов, в частности JButton(),
        //JButton(String text), JButton(Icon icon), JButton(String text, Icon 
        //icon), параметры которых говорят сами за себя. Пятый конструктор мы 
        //рассмотрим в следующей главе.
        JButton btnClear = new JButton("Очистить");
        // Кнопка очистить
    public static void main(String[] args) {
        // public static void main(String args[ ]) 